name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Build and test job
  test:
    name: Build, Test & Accessibility Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        # Use placeholder values for build
        NEXT_PUBLIC_UNSPLASH_ACCESS_KEY: ${{ secrets.NEXT_PUBLIC_UNSPLASH_ACCESS_KEY || 'placeholder' }}
        UNSPLASH_SECRET_KEY: ${{ secrets.UNSPLASH_SECRET_KEY || 'placeholder' }}
        UNSPLASH_APPLICATION_ID: ${{ secrets.UNSPLASH_APPLICATION_ID || '12345' }}

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Start application for testing
      run: |
        npm start &
        npx wait-on http://localhost:3000
      env:
        NODE_ENV: test
        NEXT_PUBLIC_UNSPLASH_ACCESS_KEY: test-key
        UNSPLASH_SECRET_KEY: test-secret
        UNSPLASH_APPLICATION_ID: 12345

    - name: Run Playwright tests
      run: npm run test:e2e
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

  # Visual regression testing job (separate for performance)
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.pull_request.draft == false

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_UNSPLASH_ACCESS_KEY: test-key
        UNSPLASH_SECRET_KEY: test-secret
        UNSPLASH_APPLICATION_ID: 12345

    - name: Start application for testing
      run: |
        npm start &
        npx wait-on http://localhost:3000
      env:
        NODE_ENV: test

    - name: Run visual regression tests
      run: npx playwright test visual-regression.spec.ts --project=${{ matrix.browser }}-desktop
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-test-results-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

  # Accessibility-specific testing job
  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_UNSPLASH_ACCESS_KEY: test-key
        UNSPLASH_SECRET_KEY: test-secret
        UNSPLASH_APPLICATION_ID: 12345

    - name: Start application for testing
      run: |
        npm start &
        npx wait-on http://localhost:3000
      env:
        NODE_ENV: test

    - name: Run accessibility tests
      run: npx playwright test accessibility.spec.ts
      env:
        CI: true
        BASE_URL: http://localhost:3000

    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: test-results/
        retention-days: 30

    - name: Comment accessibility results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Look for accessibility test results
          const testResultsPath = 'test-results/results.json';

          if (fs.existsSync(testResultsPath)) {
            const results = JSON.parse(fs.readFileSync(testResultsPath, 'utf8'));

            const passedTests = results.suites
              .flatMap(suite => suite.tests)
              .filter(test => test.status === 'passed').length;

            const failedTests = results.suites
              .flatMap(suite => suite.tests)
              .filter(test => test.status === 'failed').length;

            const comment = `## üîç Accessibility Audit Results

            - ‚úÖ **Passed Tests**: ${passedTests}
            - ‚ùå **Failed Tests**: ${failedTests}

            ${failedTests > 0 ? '‚ö†Ô∏è **Action Required**: Some accessibility tests failed. Please review the test results and fix any critical or serious violations.' : 'üéâ **All accessibility tests passed!**'}

            Full report available in the [test artifacts](${context.payload.pull_request.html_url}/checks).`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npx better-npm-audit audit

  # Deploy job (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, visual-tests, accessibility-audit, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_UNSPLASH_ACCESS_KEY: ${{ secrets.NEXT_PUBLIC_UNSPLASH_ACCESS_KEY }}
        UNSPLASH_SECRET_KEY: ${{ secrets.UNSPLASH_SECRET_KEY }}
        UNSPLASH_APPLICATION_ID: ${{ secrets.UNSPLASH_APPLICATION_ID }}

    - name: Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod'

  # Performance monitoring job
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Comment Lighthouse results on commit
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üöÄ Lighthouse Performance Results

          The latest deployment has been audited for performance, accessibility, best practices, and SEO.

          üìä [View detailed Lighthouse report](${process.env.LHCI_BUILD_URL})

          Key metrics will be posted here once the audit completes.`;

          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: comment
          });